/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useLayoutEffect, useMemo, useRef, useState } from 'react'
import { Reflector, useGLTF, useTexture } from '@react-three/drei'
import { GLTF, GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'
import * as THREE from 'three'
import { Stage } from './components/Stage'
import Body from './components/Body'
import Glass from './components/Glass'
import Indicators from './components/Indicators'
import MainLights from './components/MainLights'
import TailLights from './components/TailLights'
import Rims from './components/Rims'
import SolarPanel1 from './components/SolarPanel1'
import SolarPanel2 from './components/SolarPanel2'
import Wheels from './components/Wheels'
import WindowFrame from './components/WindowFrame'
import { useFrame, useLoader } from '@react-three/fiber'
import { SVGLoader } from 'three/examples/jsm/loaders/SVGLoader'



const MODEL_PATH = '/cybertruck.gltf'

useGLTF.preload(MODEL_PATH)

type GLTFResult = GLTF & {
  scene: any
  nodes: any
  materials: any
}


export default function Model(props: any) {
  const group = useRef()
  const { scene, nodes, materials } = useGLTF(MODEL_PATH) as unknown as GLTFResult
  console.log("ðŸš€ ~ file: index.tsx ~ line 25 ~ Model ~ scene", scene)

  return (
    <>
      <Stage />
      <group ref={group} {...props} dispose={null}>
        <Body geometry={nodes.body.geometry} material={materials.Silver}/>
        <Glass geometry={nodes.glass.geometry} material={materials.Glass} />
        <Indicators geometry={nodes.indicators.geometry} material={materials.Light_orange} />
        <MainLights geometry={nodes.main_lights.geometry} material={materials.Light_white} />
        <TailLights geometry={nodes.tail_lights.geometry} material={materials.Orange} />
        <Rims geometry={nodes.rims.geometry} material={materials.Gray} />
        <SolarPanel1 geometry={nodes.solar_panel_1.geometry} material={materials.SB_black} />
        <SolarPanel2 geometry={nodes.solar_panel_2.geometry} material={materials.SB_gray} />
        <Wheels geometry={nodes.wheels.geometry} material={materials.Black} />
        <WindowFrame geometry={nodes.window_frame.geometry} material={materials.Black_glass} />
    </group>
    </>
  )
}

useGLTF.preload('/cybertruck.gltf')
