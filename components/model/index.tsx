/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF, GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'
import * as THREE from 'three'


const MODEL_PATH = '/cybertruck.gltf'

useGLTF.preload(MODEL_PATH)

type GLTFResult = GLTF & {
  nodes: any
  materials: any
}

export default function Model(props: any) {
  const group = useRef()
  const { nodes, materials } = useGLTF(MODEL_PATH) as unknown as GLTFResult
  return (
    <group ref={group} {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.window_frame.geometry}
        material={materials.Black_glass}
        rotation={[-1.56, 0.02, -1.57]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.tail_lights.geometry}
        material={materials.Orange}
        rotation={[-1.56, 0.02, -1.57]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.solar_panel_1.geometry}
        material={materials.SB_black}
        rotation={[-1.56, 0.02, -1.57]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.solar_panel_2.geometry}
        material={materials.SB_gray}
        rotation={[-1.56, 0.02, -1.57]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.wheels.geometry}
        material={materials.Black}
        rotation={[-1.56, 0.02, -1.57]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.glass.geometry}
        material={materials.Glass}
        rotation={[-1.56, 0.02, -1.57]}
        >
        <meshPhysicalMaterial
          toneMapped={false}
          depthFunc={THREE.AlwaysDepth}
          depthTest={false}
          depthWrite={false}
          attach="material"
          color={'rgb(44,136,198)'}
          transparent={true}
          opacity={0.3}
          metalness={1}
          envMapIntensity={0.9}
          clearcoat={1}
          reflectivity={0.2}
          refractionRatio={1}
          ior={0.9}
        />
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.rims.geometry}
        material={materials.Gray}
        rotation={[-1.56, 0.02, -1.57]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.indicators.geometry}
        material={materials.Light_orange}
        rotation={[-1.56, 0.02, -1.57]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.main_lights.geometry}
        material={materials.Light_white}
        rotation={[-1.56, 0.02, -1.57]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.body.geometry}
        material={materials.Silver}
        rotation={[-1.56, 0.02, -1.57]}
      >
        <meshPhysicalMaterial
          toneMapped={false}
          depthFunc={THREE.AlwaysDepth}
          depthTest={false}
          depthWrite={false}
          attach="material"
          color={'hotpink'}
          transparent={true}
          opacity={0.3}
          metalness={1}
          envMapIntensity={0.9}
          clearcoat={1}
          reflectivity={0.2}
          refractionRatio={1}
          ior={0.9}
        />
      </mesh>
    </group>
  )
}

useGLTF.preload('/cybertruck.gltf')
