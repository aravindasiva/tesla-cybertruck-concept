/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useLayoutEffect, useMemo, useRef, useState } from 'react'
import { Reflector, useGLTF, useTexture, Stage, Preload } from '@react-three/drei'
import { GLTF, GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'
import * as THREE from 'three'
import { CustomLight } from './components/CustomLight'
import Body from './components/Body'
import Glass from './components/Glass'
import Indicators from './components/Indicators'
import MainLights from './components/MainLights'
import TailLights from './components/TailLights'
import Rims from './components/Rims'
import SolarPanel1 from './components/SolarPanel1'
import SolarPanel2 from './components/SolarPanel2'
import Wheels from './components/Wheels'
import WindowFrame from './components/WindowFrame'
import { useFrame, useLoader } from '@react-three/fiber'
import { SVGLoader } from 'three/examples/jsm/loaders/SVGLoader'
import { HexColorPicker } from "react-colorful"
import { proxy, useSnapshot } from "valtio"
import Particles from './components/Particles'



const MODEL_PATH = '/cybertruck.gltf'

useGLTF.preload(MODEL_PATH)

type GLTFResult = GLTF & {
  scene: any
  nodes: any
  materials: any
}

export type Items = {
  body: any,
  glass: any,
  rims: any,
  solarPanel1: any,
  solarPanel2: any,
}

const state = proxy({
  current: null,
  logoColor: "#000",
  items: {
    body: "#575757",
    glass: "#2A323F",
    rims: "#000000",
    solarPanel1: "#5e5e5e",
    solarPanel2: "#757575",
  },
})


export default function Model(props: any) {
  const group = useRef()
  const mouse = useRef([0, 0])
  const snap = useSnapshot(state)
  const { scene, nodes, materials } = useGLTF(MODEL_PATH) as unknown as GLTFResult


  const [hovered, set] = useState(null)
  useEffect(() => {
    const cursor = `<svg width="62" height="62" viewBox="0 0 62 62" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M27.5 52C41.031 52 52 41.031 52 27.5C52 13.969 41.031 3 27.5 3C13.969 3 3 13.969 3 27.5C3 41.031 13.969 52 27.5 52Z" fill="white" fill-opacity="0.5" stroke="black"/>
    <path d="M27.5036 48L32.2583 19.9897C36.7904 19.9897 38.22 20.5103 38.4264 22.6351C38.4264 22.6351 41.4666 21.4477 43 19.0361C37.0163 16.1317 31.004 16.0007 31.004 16.0007L27.4957 20.4766L27.5036 20.476L23.9953 16C23.9953 16 17.9829 16.1311 12 19.0355C13.5321 21.4471 16.5735 22.6345 16.5735 22.6345C16.7811 20.5096 18.2089 19.989 22.7106 19.9856L27.5036 48Z" fill="${snap.items[hovered] ? snap.items[hovered] : snap.logoColor}"/>
    <path d="M27.5 14.9505C32.4812 14.9155 38.1827 15.6595 44.0194 18C44.7995 16.7082 45 16.1372 45 16.1372C38.6197 13.8148 32.6446 13.0199 27.4993 13C22.3543 13.0199 16.3795 13.8149 10 16.1372C10 16.1372 10.2846 16.8405 10.98 18C16.8155 15.6595 22.5187 14.9155 27.5 14.9505Z" fill="${snap.items[hovered] ? snap.items[hovered] : snap.logoColor}"/>
    <path d="M0 0L11 2.947L2.947 11L0 0Z" fill="black"/>
        <text fill="#000" style="white-space:pre" font-family="Inter var, sans-serif" font-size="10" letter-spacing="-.01em">
          <tspan x="35" y="60">${hovered}</tspan>
        </text>
    <defs>
    <filter id="filter0_d_6:3" x="4" y="9" width="47" height="47" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
    <feFlood flood-opacity="0" result="BackgroundImageFix"/>
    <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
    <feOffset dy="2"/>
    <feGaussianBlur stdDeviation="3"/>
    <feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0"/>
    <feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_6:3"/>
    <feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_6:3" result="shape"/>
    </filter>
    </defs>
    </svg>`
    const auto = `<svg width="62" height="62" viewBox="0 0 62 62" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M27.5 52C41.031 52 52 41.031 52 27.5C52 13.969 41.031 3 27.5 3C13.969 3 3 13.969 3 27.5C3 41.031 13.969 52 27.5 52Z" fill="white" fill-opacity="0.5" stroke="black"/>
    <path d="M27.5036 48L32.2583 19.9897C36.7904 19.9897 38.22 20.5103 38.4264 22.6351C38.4264 22.6351 41.4666 21.4477 43 19.0361C37.0163 16.1317 31.004 16.0007 31.004 16.0007L27.4957 20.4766L27.5036 20.476L23.9953 16C23.9953 16 17.9829 16.1311 12 19.0355C13.5321 21.4471 16.5735 22.6345 16.5735 22.6345C16.7811 20.5096 18.2089 19.989 22.7106 19.9856L27.5036 48Z" fill="black"/>
    <path d="M27.5 14.9505C32.4812 14.9155 38.1827 15.6595 44.0194 18C44.7995 16.7082 45 16.1372 45 16.1372C38.6197 13.8148 32.6446 13.0199 27.4993 13C22.3543 13.0199 16.3795 13.8149 10 16.1372C10 16.1372 10.2846 16.8405 10.98 18C16.8155 15.6595 22.5187 14.9155 27.5 14.9505Z" fill="black"/>
    <path d="M0 0L11 2.947L2.947 11L0 0Z" fill="black"/>
        <text fill="#000" style="white-space:pre" font-family="Inter var, sans-serif" font-size="10" letter-spacing="-.01em">
          <tspan x="35" y="60"></tspan>
        </text>
    <defs>
    <filter id="filter0_d_6:3" x="4" y="9" width="47" height="47" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
    <feFlood flood-opacity="0" result="BackgroundImageFix"/>
    <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
    <feOffset dy="2"/>
    <feGaussianBlur stdDeviation="3"/>
    <feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0"/>
    <feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_6:3"/>
    <feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_6:3" result="shape"/>
    </filter>
    </defs>
    </svg>`
    document.body.style.cursor = `url('data:image/svg+xml;base64,${btoa(hovered ? cursor : auto)}'), auto`
  }, [hovered, snap.items, snap.logoColor])


  return (
    <>
      <CustomLight />
      <Stage shadows adjustCamera intensity={0.3} environment='warehouse'>
        <group
          {...props}
          ref={group}
          dispose={null}
          onPointerOver={(e: any) => {e.stopPropagation(), set(e.object.material.name)}}

          onPointerOut={(e: any) => {e.stopPropagation(), set(null)}}
          onPointerMissed={() => (state.current = null)}
          onClick={(e: any) => {e.stopPropagation(), (state.current = e.object.material.name),console.log("ðŸš€ ~ file: index.tsx ~ line 106 ~ Model ~ state.current", state.current),console.log("ðŸš€ ~ file: index.tsx ~ line 106 ~ Model ~ e.object", e.object)}}
        >
          <Body geometry={nodes.body.geometry} material={materials.Silver} color={snap.items.body} />
          <Glass geometry={nodes.glass.geometry} color={snap.items.glass} />
          <Indicators geometry={nodes.indicators.geometry} material={materials.Light_orange} />
          <MainLights geometry={nodes.main_lights.geometry} material={materials.Light_white} />
          <TailLights geometry={nodes.tail_lights.geometry} material={materials.Orange} />
          <Rims geometry={nodes.rims.geometry} material={materials.Gray} color={snap.items.rims} />
          <SolarPanel1 geometry={nodes.solar_panel_1.geometry} color={snap.items.solarPanel1} />
          <SolarPanel2 geometry={nodes.solar_panel_2.geometry} color={snap.items.solarPanel2} />
          <Wheels geometry={nodes.wheels.geometry} material={materials.Black} />
          <WindowFrame geometry={nodes.window_frame.geometry} material={materials.Black_glass} />
          <Particles count={700} mouse={mouse} />
        </group>
      </Stage>
      <Preload all/>
    </>
  )
}



export function Picker() {
  const snap = useSnapshot(state)
  return (
    <div style={{ display: snap.current ? "block" : "none" }}>
      <HexColorPicker
        style={{
          position: 'absolute',
          top: '74px',
          left: '270px',
          width: '90px',
          height: '90px',
        }}
        color={snap.items[snap.current]}
        onChange={(color) => (state.items[snap.current] = color)}
      />
      <h1>{snap.current}</h1>
    </div>
  )
}

useGLTF.preload('/cybertruck.gltf')
